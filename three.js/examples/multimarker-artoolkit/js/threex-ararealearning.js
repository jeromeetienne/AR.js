var THREEx = THREEx || {}

THREEx.ArAreaLearning = function(arToolkitContext, markersControlsParameters){
	var _this = this
	this.markersRoot = []
	this.markersControls = []

	markersControlsParameters.forEach(function(markerControlsParameters, index){
		var markerRoot = new THREE.Group()
		_this.markersRoot.push(markerRoot)
		
		var mesh = buildObject(index)
		markerRoot.add( mesh )

		var markerControls = new THREEx.ArMarkerControls(arToolkitContext, markerRoot, markerControlsParameters)		
		_this.markersControls.push(markerControls)
	})
	
	arToolkitContext.addEventListener('sourceProcessed', function(event){
		_this._onSourceProcessed()
	})

	return
	
	function buildObject(text){
		var canvas = document.createElement( 'canvas' );
		canvas.width =  64;
		canvas.height = 64;

		var context = canvas.getContext( '2d' );
		var texture = new THREE.CanvasTexture( canvas );

		// put the text in the sprite
		context.font = '48px monospace';
		context.clearRect( 0, 0, canvas.width, canvas.height );
		context.fillStyle = 'darkblue';
		context.fillText(text, canvas.width/4, 3*canvas.height/4 )
		texture.needsUpdate = true

		// var geometry = new THREE.CubeGeometry(1, 1, 1)
		var geometry = new THREE.PlaneGeometry(1, 1)
		var material = new THREE.MeshBasicMaterial({
			map: texture, 
		});
		var mesh = new THREE.Mesh(geometry, material)
		mesh.rotation.x = -Math.PI/2
		return mesh
	}
}


/**
 * called when ArToolkitContext have processed the ArToolkitSource
 */
THREEx.ArAreaLearning.prototype._onSourceProcessed = function(){
	// - store the relative position of one with the other
	// - the first marker is always the 0, 0, 0
	
}

/**
 * called when ArToolkitContext have processed the ArToolkitSource
 */
THREEx.ArAreaLearning.prototype.generateMultiMarkerFile = function(){
	var _this = this
	
	var content = ""
	content += '# ARToolKit multi marker file automatically generated by AR.js '+THREEx.ArToolkitContext.REVISION+'\n'
	content += '\n'
	content += '# the number of patterns to be recognized\n'
	content += this.markersRoot.length + '\n'
	
	console.assert(_this.markersRoot.length !== 0)
	var baseMatrix = new THREE.Matrix4().getInverse( _this.markersRoot[0].matrix )
	
	this.markersControls.forEach(function(markerControls, index){
		content += '\n'
		content += '# Marker '+index+'\n'

		var markerRoot = _this.markersRoot[index]
		content += markerControls.parameters.patternUrl.split('/').pop() + '\n'
		content += markerControls.parameters.size + '\n'
		
		
		var matrix = markerRoot.matrix.clone()
		
		matrix.multiply(baseMatrix)
		for(var line = 0; line < 3; line++){
			content += matrix.elements[line + 0] + ' '
			content += matrix.elements[line + 4] + ' '
			content += matrix.elements[line + 8] + ' '
			content += matrix.elements[line + 12] + '\n'
		}
	})
	
	return content
}
